import heapq
import itertools

class PuzzleState:
    def __init__(self, board, moves=0, previous=None):
        self.board = board
        self.moves = moves
        self.previous = previous
        self.priority = self.moves + self.manhattan_distance()

    def __lt__(self, other):
        return self.priority < other.priority

    def manhattan_distance(self):
        distance = 0
        for i in range(3):
            for j in range(3):
                if self.board[i][j] != 0:
                    x, y = divmod(self.board[i][j] - 1, 3)
                    distance += abs(x - i) + abs(y - j)
        return distance

    def is_goal(self):
        return self.board == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

    def neighbors(self):
        def swap_and_create(new_board, i1, j1, i2, j2):
            new_board[i1][j1], new_board[i2][j2] = new_board[i2][j2], new_board[i1][j1]
            return PuzzleState(new_board, self.moves + 1, self)

        i, j = next((i, j) for i, row in enumerate(self.board) for j, val in enumerate(row) if val == 0)
        possible_moves = []
        if i > 0:
            possible_moves.append(swap_and_create([row[:] for row in self.board], i, j, i - 1, j))
        if i < 2:
            possible_moves.append(swap_and_create([row[:] for row in self.board], i, j, i + 1, j))
        if j > 0:
            possible_moves.append(swap_and_create([row[:] for row in self.board], i, j, i, j - 1))
        if j < 2:
            possible_moves.append(swap_and_create([row[:] for row in self.board], i, j, i, j + 1))
        return possible_moves

    def __hash__(self):
        return hash(str(self.board))

    def __eq__(self, other):
        return self.board == other.board

def solve_puzzle(initial_board):
    initial_state = PuzzleState(initial_board)
    if initial_state.is_goal():
        return initial_state

    frontier = []
    heapq.heappush(frontier, initial_state)
    explored = set()
    explored.add(initial_state)

    while frontier:
        current_state = heapq.heappop(frontier)
        if current_state.is_goal():
            return current_state

        for neighbor in current_state.neighbors():
            if neighbor not in explored:
                heapq.heappush(frontier, neighbor)
                explored.add(neighbor)

    return None

def print_solution(solution):
    path = []
    while solution:
        path.append(solution.board)
        solution = solution.previous
    path.reverse()
    for step in path:
        for row in step:
            print(row)
        print()

if __name__ == "__main__":
    initial_board = [
        [1, 2, 3],
        [4, 0, 5],
        [7, 8, 6]
    ]
    solution = solve_puzzle(initial_board)
    if solution:
        print("Solution found!")
        print_solution(solution)
    else:
        print("No solution exists.")
