def tsp_dynamic_programming(graph):
    """
    Solves the TSP problem using dynamic programming (Held-Karp algorithm).
    
    :param graph: 2D list representing the adjacency matrix of the graph.
    :return: The minimum cost of the tour.
    """
    n = len(graph)
    dp = [[None] * n for _ in range(1 << n)]
    parent = [[None] * n for _ in range(1 << n)]
    
    def tsp(mask, pos):
        if mask == (1 << n) - 1:
            return graph[pos][0]  # Return to the starting point
        
        if dp[mask][pos] is not None:
            return dp[mask][pos]
        
        min_cost = float('inf')
        for city in range(n):
            if mask & (1 << city) == 0:
                new_cost = graph[pos][city] + tsp(mask | (1 << city), city)
                if new_cost < min_cost:
                    min_cost = new_cost
                    parent[mask][pos] = city
        
        dp[mask][pos] = min_cost
        return min_cost
    
    cost = tsp(1, 0)
    
    # Reconstruct the path
    mask = 1
    pos = 0
    path = [0]
    while mask != (1 << n) - 1:
        pos = parent[mask][pos]
        path.append(pos)
        mask |= (1 << pos)
    path.append(0)
    
    return cost, path

# Example usage
if __name__ == "__main__":
    graph = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]
    cost, path = tsp_dynamic_programming(graph)
    print(f"Minimum cost: {cost}")
    print(f"Path: {' -> '.join(map(str, path))}")
