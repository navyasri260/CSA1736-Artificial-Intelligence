def select_unassigned_variable(assignment, variables):
    for var in variables:
        if var not in assignment:
            return var
    return None

def is_consistent(assignment, var, value, neighbors):
    for neighbor in neighbors[var]:
        if neighbor in assignment and assignment[neighbor] == value:
            return False
    return True

def backtracking_search(variables, domains, neighbors):
    def backtrack(assignment):
        if len(assignment) == len(variables):
            return assignment

        var = select_unassigned_variable(assignment, variables)
        for value in domains[var]:
            if is_consistent(assignment, var, value, neighbors):
                assignment[var] = value
                result = backtrack(assignment)
                if result is not None:
                    return result
                del assignment[var]
        return None

    return backtrack({})

def map_coloring():
    # Define variables (regions)
    variables = ['WA', 'NT', 'SA', 'Q', 'NSW', 'V', 'T']

    # Define domains (colors)
    domains = {var: ['Red', 'Green', 'Blue'] for var in variables}

    # Define neighbors
    neighbors = {
        'WA': ['NT', 'SA'],
        'NT': ['WA', 'SA', 'Q'],
        'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
        'Q': ['NT', 'SA', 'NSW'],
        'NSW': ['Q', 'SA', 'V'],
        'V': ['SA', 'NSW'],
        'T': []
    }

    # Perform backtracking search
    result = backtracking_search(variables, domains, neighbors)

    if result is None:
        print("No solution found.")
    else:
        print("Solution found:")
        for region, color in result.items():
            print(f"{region}: {color}")

if __name__ == "__main__":
    map_coloring()
