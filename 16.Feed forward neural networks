import numpy as np

# Sigmoid activation function
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# Derivative of sigmoid function
def sigmoid_derivative(x):
    return x * (1 - x)

# Neural Network Class
class NeuralNetwork:
    def __init__(self, input_size, hidden_size, output_size):
        # Initialize weights
        self.weights_input_hidden = np.random.rand(input_size, hidden_size)
        self.weights_hidden_output = np.random.rand(hidden_size, output_size)
        # Initialize biases
        self.bias_hidden = np.random.rand(hidden_size)
        self.bias_output = np.random.rand(output_size)
        
    def forward_propagation(self, inputs):
        # Hidden layer
        self.hidden_input = np.dot(inputs, self.weights_input_hidden) + self.bias_hidden
        self.hidden_output = sigmoid(self.hidden_input)
        # Output layer
        self.final_input = np.dot(self.hidden_output, self.weights_hidden_output) + self.bias_output
        self.final_output = sigmoid(self.final_input)
        return self.final_output
    
    def backward_propagation(self, inputs, expected_output, learning_rate):
        # Calculate error
        output_error = expected_output - self.final_output
        output_delta = output_error * sigmoid_derivative(self.final_output)
        
        # Calculate error for hidden layer
        hidden_error = output_delta.dot(self.weights_hidden_output.T)
        hidden_delta = hidden_error * sigmoid_derivative(self.hidden_output)
        
        # Update weights and biases
        self.weights_hidden_output += self.hidden_output.T.dot(output_delta) * learning_rate
        self.weights_input_hidden += inputs.T.dot(hidden_delta) * learning_rate
        self.bias_output += np.sum(output_delta, axis=0) * learning_rate
        self.bias_hidden += np.sum(hidden_delta, axis=0) * learning_rate
    
    def train(self, inputs, expected_output, epochs, learning_rate):
        for epoch in range(epochs):
            self.forward_propagation(inputs)
            self.backward_propagation(inputs, expected_output, learning_rate)
            
    def predict(self, inputs):
        return self.forward_propagation(inputs)

# Example usage
if __name__ == "__main__":
    # Define the dataset (XOR problem)
    inputs = np.array([[0, 0],
                       [0, 1],
                       [1, 0],
                       [1, 1]])
    expected_output = np.array([[0], [1], [1], [0]])
    
    # Create Neural Network
    nn = NeuralNetwork(input_size=2, hidden_size=2, output_size=1)
    
    # Train the Neural Network
    nn.train(inputs, expected_output, epochs=10000, learning_rate=0.1)
    
    # Test the Neural Network
    for input_data in inputs:
        print(f"Input: {input_data}, Predicted Output: {nn.predict(input_data)}")
